#!/bin/sh

. /lib/functions/bos-defaults.sh

# immediately exit when error occurs
set -e

usage() {
	echo "usage: miner [-h] {factory_reset,run_recovery,fault_light,nand_install} ..."
	echo
	echo "positional arguments:"
	echo "  {factory_reset,run_recovery,fault_light,nand_install}"
	echo "    factory_reset       reboot and initiate factory reset"
	echo "    run_recovery        reboot to recovery mode"
	echo "    fault_light         turn on or off miner's fault LED"
	echo "    nand_install        install/reinstall firmware to NAND"
	echo
	echo "optional arguments:"
	echo "  -h, --help            show this help message and exit"
}

factory_reset() {
	exec bos factory_reset "$@"
}

run_recovery() {
	exec bos run_recovery "$@"
}

fault_light() {
	if [ $# -ne 1 -o \( "$1" != 'on' -a "$1" != 'off' \) ]; then
		echo "command 'fault_light' takes only one argument [on|off]"
		exit 1
	fi
	# send 'on' or 'off' to cgminer_monitor
	echo $1 | nc localhost 4029 >/dev/null
}

nand_install() {
	local firmware_tar="/usr/share/upgrade/firmware.tar.gz"
	local stage1_script="stage1.sh"

	if [ $# -gt 0 ]; then
		echo "command 'nand_install' does not take any argument"
		exit 1
	fi

	if [ ! -f "$firmware_tar" ]; then
		echo "firmware tarball '$firmware_tar' is missing"
		exit 1
	fi

	# move to temporary directory
	local tmp_dir=$(mktemp -d)
	cd "$tmp_dir"

	echo "Extracting upgrade files..."
	tar xzf "$firmware_tar"

	# get name of extracted directory
	local braiins_os=$(echo *)
	# it is needed only content of firmware directory
	mv "$braiins_os/firmware/"* .
	rm -fr "$braiins_os"

	# override CONTROL script tailored for bOS environment
	cp /usr/share/upgrade/CONTROL.bos CONTROL

	# copy auxiliary scripts
	cp /usr/share/upgrade/CONFIG .
	cp /usr/share/upgrade/miner_cfg.config .

	# prepare attributes for stage1 script
	local miner_hwid=$(cat /tmp/miner_hwid)

	echo "Running stage1 upgrade script..."
	set +e
	if /bin/sh "$stage1_script" "$miner_hwid" yes cond no; then
		echo "Upgrade stage1 has been successful!"
	else
		echo "Upgrade stage1 failed"
	fi
	set -e

	# clean up temporary directory
	cd /
	rm -fr "$tmp_dir"

	if [ $BOS_MODE == 'sd' ]; then
		echo "Please turn off the miner and change jumper to boot it from NAND!"
	else
		echo "Rebooting to installed firmware..."
		reboot
	fi
}

# check number of arguments
if [ $# -lt 1 ]; then
	echo "missing command argument"
	exit 1
fi

# try to find command
command="$1"

case $command in
	factory_reset|run_recovery|fault_light|nand_install)
		shift
		$command "$@"
	;;
	-h|--help)
		usage
	;;
	*)  # unknown command
		echo "unknown command '$command'"
		exit 1
	;;
esac
